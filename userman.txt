Cloudtrack Manual
=================
Bernd Stramm <bernd.stramm@gmail.com>
v1.2.1, December 2009

Cloudtrack is a little distributed system that can collect and present
weather satellite images for personal use. 

This manual briefly describes what the cloudtrack programs are for, and how
they work. The manual describes the xref:structure[structure] of the system and
xref:usage[how to use] the system. Included are also remarks on how to
xref:further[further develop] these things. Some xref:specs[specifications] are 
provided if you want to modify the system, 
or xref:ownservers[target it to your own servers].

[[stucture]]
== Structure

The system consists of three layers:

+ xref:sat-da[Data Aquisition Layer]
+ xref:sat-sl[Cloudtrack Storage Layer]
+ xref:sat-ui[Cloudtrack User Interface Layer]

[[sat-da]]
=== Data Aquisition

The Data Aquisition Layer is provided by the friendly people who operate
weather satellites, and make their images available to the public. The only
part involving cloudtrack is when cloudtrack downloads their images. When
implementing this part of cloudtrack, care must be taken to respect copyrights
and similar issues. 

Currently data aquisition is done by simple scripts that download images from
well known locations to fixed locations on a Storage Layer server, and then 
store the images from the fixed locations into a database (MySql at this time)
on the server. Currently the server aquiring the images form the 
public sources is the same server that stores the database, although this
is not strictly necessary.

[Note]
****
*Note:*
An excellent source of wheater information is the 
United States National Weather 
Service http://nws.noaa.gov/[http://nws.noaa.gov] provided 
by http://www.noaa.gov/[NOAA]. Consult your local government for
their own weather service. If they don't make satellite images 
publicly available, tell them that they should.
****

[[sat-sl]]
=== Cloudtrack Storage Layer 

The Storage Layer keeps a (MySql) database containing satellite images,
indexed by a time stamp (when the image was aquired) and an image name. It
is assumed that images of the same name represent the same geographical area.
The Storage Layer provides two interfaces to the User Interface Layer:

. the http Web Interface, and
. the mysqld Interface

The mysqld interface is the same as any mysqld interface, nothing new is added 
on the database side. 
[Note]
****
*Note:*
The web and SQL interface are the ones from Qt4. This has changed from previous
versions of Cloudtrack and from Satview. While I have only tested the
SQL/MySql interface on Linux, it should work on other platforms as well.
****

The Web Interface works with a simple HTTP GET API, which encasulates the
mysqld interface locally on the server. Currently the Web Interface runs
in PHP/Apache on the same server as the mysql database. This is not strictly
speaking necessary (the Web Interface code opens a database connection on
"localhost", it could open a connection anywhere).

[[sat-ui]]
=== Cloudtrack User Interface ===

The User Interface program loads images from the database server on the
Cloudtrack Storage Layer, and displays them in a simple GUI. The Gui allows
stepping through images, or running through a number of sequeltial
images to view short animations. The controls operate much like
tape player controls. The Gui allows the user to change database servers
and change image names, so that different geographical areas can be
observed. The Gui also allows switching the interface to the Storage Layer
between web (HTTP) and direct (mysql) interfaces. 

The User Interface Layer Gui provides an in-memory cache at the user's
side of the system. 

The User Interface Layer also provides a command line program to copy image
data between different Storage Layer servers. This is useful for the (typical)
case where a user perfers to view data from a local server, but the local
server does not do aquisition 24 hours a day.

[[usage]]
== How to Use Cloudtrack ==

The only thing an end-user really has to know is the viewer Gui. This is called
from the command line:

.Calling the GUI in Linux
[source,sh]
----
$ cloudtrack --help
  -h [ --help ]          give help message and exit
  -v [ --version ]       give version and exit
  -w [ --web ]           use web interface
  -d [ --dir ]           user direct sql interface
  -E [ --eastcoast ]     show GOES ECIR.JPG images
  -W [ --westcoast ]     show GOES WCIR.JPG images
  -s [ --server ] arg    input server
  -P [ --path ] arg      path on web server
  -o [ --outserver ] arg output server
  -m [ --minhours ] arg  minimum image age to consider
  -M [ --maxhours ] arg  maximum image age to consider
  -i [ --image ] arg     image name

----

where these options do more or less what you would expect.

The server defaults to "localhost", and the interface defaults to "--web".
Default maximum age is "--maxhours 720", which gives you 30 days from the
present. So the following are equivalent:
[source,sh]
----
$ cloudtrack --web --server localhost -M 720
is the same as
$ cloudtrack
----

At the point of this writing, I am not aware of any servers except mine,
so you can try
[source,sh]
----
$ cloudtrack --web --server www.bernd-stramm.com
----
but be aware that this server is slow. You could wait 30 seconds for the first
image to show up.

Of course it is much better if you have your own server, particularly
if you are interested in images other than ECIR.JPG and WCIR.JPG, which
only cover the US and surrounding areas. If you live in Europe that doesn't
do you much good. Unless you are in Iceland, where you will get the cloud
systems just after they leave Newfoundland.

The user interface allows changing the host and the interface after the program
is running. Changing either one means that all currently cached images
are discarded, and a new index is loaded.

The controls look like a window with some buttons and a little text:

image::controlwin.jpg[The control window]

where the buttons do more or less what the labeling says they do.
The images look like weather satellite images and are displayed in a separate
window:

image::imagewin.jpg[weather satellite image]

[[ownservers]]
== Using Your Own Servers ==

Using your own servers is highly recommended, since I am not interested
in financially supporting everyone's desire to watch weather satellite pictures.

Using your own database server is also very simple. You need one single table for
this. The table can be in a database by itself, which can simplify managing
access privileges. See the xref:database-defs[Database Definitions] to define your own.
Note that these are the minimum requirements, if your table contains more
it doesn't hurt. Just be aware that *storeID.php* will only supply
the fields defined for Cloudtrack.

One resonable way of doing this is to use a remote host that grabs the
images every few hours using *cron* to run *getit.sh* and *storeinDB.php*,
and using *copydb* to refresh a local database.


[[further]]
== Future Development ==


Of course there is no reason that only weather images are the subject.
Basically anything that has is a natural sequence, and that can
be captured as images, makes sense to use. 

Currently the main cloudtrack program is just a viewer - it doesn't store 
anything, or process any images. Some ambitious person could add more
functionality. Storing selected images or sequences perhaps, with markup
of images. 

[[specs]]
== Specifications ==
This section gives some implementation details. We have the individual 
pieces of code that make up the system:

. Aquisition
.. getit.sh
. Storage
.. storeIR.php
.. satserv.php
. User Interface
.. cloudtrack
.. copydb

=== User Interface ===

To change the user interface defaults, change the file *satview-defaults.h*:

[[ui-default-source]]
.satview-defaults.h
[source,C]
----
#define SATVIEW_DEFAULT_PICNAME     "ECIR.JPG"

#define SATVIEW_DEFAULT_S0          "localhost"

#define SATVIEW_DEFAULT_PATH         "/test/satserv.php"

----

==== copydb ====
The *copydb* utility allows you to copy images between databases. It is command
command line only at this point, and I don't have any plans to make a GUI. The
usage is very simple:
[source,sh]
----
$ copydb:
  -h [ --help ]          give help message and exit
  -v [ --version ]       give version and exit
  -w [ --web ]           use web interface
  -d [ --dir ]           user direct sql interface
  -E [ --eastcoast ]     show GOES ECIR.JPG images
  -W [ --westcoast ]     show GOES WCIR.JPG images
  -s [ --server ] arg    input server
  -P [ --path ] arg      path on web server
  -o [ --outserver ] arg output server
  -m [ --minhours ] arg  minimum image age to consider
  -M [ --maxhours ] arg  maximum image age to consider
  -i [ --image ] arg     image name
----
You may notice that this is the same as for the viewer. A typical usage 
after a long weekend could be:
[source,sh]
----
$ copydb --web --server www.yourownbigserver.com -o localhost -m 0 -M 72
----
to copy three day's worth of images from yourownbigserver to your local
machine. Then you have fast access to the images locally.

Note that *copydb* will do third-party copies, meaning that you can
copy from server A to server B, running copydb on machine C. Note also that
the interface for the outgoing server is assumed to be direct. This is
because the web interface is read-only.


=== Database ===
The database table containing the images has 5 fields. The two fields
named *index* and *picname* combined are required to be unique, 
and can be made an index. 

[[database-defs]]
.Database Field Definitions
****
++++
<p>
<table border="1">
<tr >
<th>Field </th>
<th>Type</th>
<th>Collation </th>
<th> Attributes </th>
<th> Null </th>
<th>Default  </th>
</tr>

<tr>
<td><i>
ident  </i></td>
<td>bigint(20) </td>
<td> </td>
<td> </td>
<td>No</td>
<td>None</td>
</tr>

<tr>
<td><i>picname</i></td>
<td>varchar(255)</td>
<td>latin1_swedish_ci</td>
<td> </td>
<td>No</td>
<td> None </td>
</tr>

<tr>
<td><i>storetime</i></td>
<td>timestamp</td>
<td> </td>
<td> </td>
<td>No </td>
<td>CURRENT_TIMESTAMP 	</td>
</tr>

<tr>
<td><i>remark</i></td>
<td>text</td>
<td>	latin1_swedish_ci</td>
<td> </td>
<td>No</td>
<td>None </td>
</tr>

<tr>
<td><i>image</i></td>
<td>longblob</td>
<td> </td>
<td>	BINARY</td>
<td>No</td>
<td>None </td>
</td>
</table>
++++
****

=== Web Interface ===

Look in *satserv.php*. Basically you can ask for the index of
available images with a get

[source,sh]
----
GET .../satserve.php?fn=index&min=<timestamp>&max=<timestamp>
----
where the timestamps are Unix epoch seconds. Well, they are for
the currently present databases. For your own database, the can
be anything you want.

and for individual images

[source,sh]
----
GET .../satserve.php?fn=item&k1=<ident>&k2=<picname>
----

where ident and picname are encoded as ASCII/hex, e.g. '123' is '313233'.
All the encoding is done like that, to avoid issues like spaces inside 
strings. I could have bothered with the traditional complicated escape
characters for every possible exception, but why?

At the time of this writing, my personal web
server provides data on the web interface. It is not wise to
count on it being there.

=== Prerequisits ===

To build and run the parts of Cloudtrack, the current version uses:

. On the user interface
.. C\+\+
... Gcc or Visual C\+\+
.. Qt4, including these parts:
... Core
... Gui
... Network
... Sql
. On the server you need
.. PHP5 on the server
.. Apache or something else that serves PHP over HTTP
.. wget on the server
.. cron 

[Note]
****
*Memory:* The Cloudtrack user interface viewer
buffers the jpeg version of all images that have been viewed
in the current session, plus *one* decompressed image. It does not
save anything between sessions.
****

==== How to Build ====

Read the INSTALL file. It's easy.

==== Conditionally Compiled Sections ====

The code contains some sections that are compiled only when certain
flags are set. This in controlled in the file *satview-config.h*.
For historical reasons, there are multiple network and SQL interfaces.
You can turn them on and off in this file. 

Note that only the ones turned on in the shipping archive are currently tested.

==== Can I Run Something Like This in My Browser ====

Why would you want to?

== License and Warranty ==

This is free open source software, hence the usual licensing. And the 
usual warranty, or lack thereof:

****
These programs are distributed under the terms of the 
GNU General Public License version 3.

See the file *COPYING* for the complete text of the license. You can
also find it on http://www.gnu.org.

This software is distributed in the hope that it will be useful, 
but WITHOUT ANY WARRANTY; without even the implied warranty 
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. 
****


____

 
~Copyright (C) 2009 http://www.bernd-stramm.com/[Bernd Stramm] All Rights Reserved~
____
